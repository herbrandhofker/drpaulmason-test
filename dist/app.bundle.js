!function(n){var r={};function e(t){if(r[t])return r[t].exports;var o=r[t]={i:t,l:!1,exports:{}};return n[t].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=n,e.c=r,e.d=function(n,r,t){e.o(n,r)||Object.defineProperty(n,r,{enumerable:!0,get:t})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,r){if(1&r&&(n=e(n)),8&r)return n;if(4&r&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(e.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&r&&"string"!=typeof n)for(var o in n)e.d(t,o,function(r){return n[r]}.bind(null,o));return t},e.n=function(n){var r=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(r,"a",r),r},e.o=function(n,r){return Object.prototype.hasOwnProperty.call(n,r)},e.p="",e(e.s=4)}([function(n,r,e){"use strict";var t=e(2),o=e.n(t),a=e(3),i=e.n(a)()(o.a);i.push([n.i,":root {\r\n    --blue: #1e90ff;\r\n    --white: #ffffff;\r\n    --grey : lightgrey;\r\n    --default-margin : 30px;\r\n    --menutext-size : 0.8em;\r\n}\r\n\r\nbody {    \r\n    font-family : sans-serif;\r\n    background-color: var(--blue);\r\n    color: var(--white); \r\n    font-size: 1.2em;\r\n    margin: 15px;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\nh1 {\r\n    text-align: center;\r\n}\r\n\r\np {\r\n    margin: var(--default-margin);\r\n}\r\n\r\nbutton {\r\n    margin: var(--default-margin);\r\n}\r\n\r\n.dropbtn {\r\n    color : black;\r\n    margin: var(--default-margin);\r\n}\r\n\r\n.navbar {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    background-color: var(--white);\r\n}\r\n\r\n.navbar .menu-item {\r\n    float: left;\r\n    color: black;\r\n    text-align: center;\r\n    padding: 14px 16px;\r\n    text-decoration: none;\r\n    font-size: var(--menutext-size);\r\n}\r\n\r\n.dropdown {\r\n    float: left;\r\n    overflow: hidden;\r\n}\r\n\r\n.dropdown .dropbtn {\r\n    border: none;\r\n    outline: none;\r\n    font-size: var(--menutext-size);\r\n    padding: 14px 16px;\r\n    margin: 0;\r\n}\r\n\r\n.navbar .menu-item:hover, .dropdown:hover .dropbtn {\r\n    background-color: var(--grey); \r\n}\r\n\r\n.dropdown-content {\r\n    opacity: 0;\r\n    transform-origin: top center;\r\n    position: absolute;\r\n    background-color: var(--white);\r\n    min-width: 160px;\r\n    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.dropdown-content .menu-item{\r\n    float: none;\r\n    color: black;\r\n    padding: 12px 16px;\r\n    text-decoration: none;\r\n    text-align: left;\r\n}\r\n\r\n.dropdown:hover .dropdown-content {\r\n    animation : animate 450ms ease-in-out forwards;\r\n    animation-delay : 200ms;\r\n}\r\n\r\n@keyframes animate{\r\n    0%{\r\n        opacity:0;\r\n        transform: rotateX(-90deg)\r\n    }\r\n    50%{\r\n        opacity :0.5;\r\n        transform: rotateX(20deg)        \r\n    }\r\n    100%{\r\n        opacity:1;\r\n        transform: rotateX(0deg)\r\n    }\r\n}\r\n\r\n.buttonbox {\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.buttonbox button {\r\n    padding: 10px;\r\n    color: var(--white);\r\n    background-color: var(--blue);\r\n    border-color: var(--white);\r\n    font-size: 1.2em;\r\n}\r\n\r\n.buttonbox button:hover {\r\n    background-color: var(--white);\r\n    color: black;\r\n    border-width: 0px;\r\n  }\r\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,gBAAgB;IAChB,kBAAkB;IAClB,uBAAuB;IACvB,uBAAuB;AAC3B;;AAEA;IACI,wBAAwB;IACxB,6BAA6B;IAC7B,mBAAmB;IACnB,gBAAgB;IAChB,YAAY;IACZ,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,8BAA8B;AAClC;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,qBAAqB;IACrB,+BAA+B;AACnC;;AAEA;IACI,WAAW;IACX,gBAAgB;AACpB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,+BAA+B;IAC/B,kBAAkB;IAClB,SAAS;AACb;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,UAAU;IACV,4BAA4B;IAC5B,kBAAkB;IAClB,8BAA8B;IAC9B,gBAAgB;IAChB,+CAA+C;AACnD;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,qBAAqB;IACrB,gBAAgB;AACpB;;AAEA;IACI,8CAA8C;IAC9C,uBAAuB;AAC3B;;AAEA;IACI;QACI,SAAS;QACT;IACJ;IACA;QACI,YAAY;QACZ;IACJ;IACA;QACI,SAAS;QACT;IACJ;AACJ;;AAEA;IACI,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,6BAA6B;IAC7B,0BAA0B;IAC1B,gBAAgB;AACpB;;AAEA;IACI,8BAA8B;IAC9B,YAAY;IACZ,iBAAiB;EACnB",sourcesContent:[":root {\r\n    --blue: #1e90ff;\r\n    --white: #ffffff;\r\n    --grey : lightgrey;\r\n    --default-margin : 30px;\r\n    --menutext-size : 0.8em;\r\n}\r\n\r\nbody {    \r\n    font-family : sans-serif;\r\n    background-color: var(--blue);\r\n    color: var(--white); \r\n    font-size: 1.2em;\r\n    margin: 15px;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\nh1 {\r\n    text-align: center;\r\n}\r\n\r\np {\r\n    margin: var(--default-margin);\r\n}\r\n\r\nbutton {\r\n    margin: var(--default-margin);\r\n}\r\n\r\n.dropbtn {\r\n    color : black;\r\n    margin: var(--default-margin);\r\n}\r\n\r\n.navbar {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    background-color: var(--white);\r\n}\r\n\r\n.navbar .menu-item {\r\n    float: left;\r\n    color: black;\r\n    text-align: center;\r\n    padding: 14px 16px;\r\n    text-decoration: none;\r\n    font-size: var(--menutext-size);\r\n}\r\n\r\n.dropdown {\r\n    float: left;\r\n    overflow: hidden;\r\n}\r\n\r\n.dropdown .dropbtn {\r\n    border: none;\r\n    outline: none;\r\n    font-size: var(--menutext-size);\r\n    padding: 14px 16px;\r\n    margin: 0;\r\n}\r\n\r\n.navbar .menu-item:hover, .dropdown:hover .dropbtn {\r\n    background-color: var(--grey); \r\n}\r\n\r\n.dropdown-content {\r\n    opacity: 0;\r\n    transform-origin: top center;\r\n    position: absolute;\r\n    background-color: var(--white);\r\n    min-width: 160px;\r\n    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.dropdown-content .menu-item{\r\n    float: none;\r\n    color: black;\r\n    padding: 12px 16px;\r\n    text-decoration: none;\r\n    text-align: left;\r\n}\r\n\r\n.dropdown:hover .dropdown-content {\r\n    animation : animate 450ms ease-in-out forwards;\r\n    animation-delay : 200ms;\r\n}\r\n\r\n@keyframes animate{\r\n    0%{\r\n        opacity:0;\r\n        transform: rotateX(-90deg)\r\n    }\r\n    50%{\r\n        opacity :0.5;\r\n        transform: rotateX(20deg)        \r\n    }\r\n    100%{\r\n        opacity:1;\r\n        transform: rotateX(0deg)\r\n    }\r\n}\r\n\r\n.buttonbox {\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.buttonbox button {\r\n    padding: 10px;\r\n    color: var(--white);\r\n    background-color: var(--blue);\r\n    border-color: var(--white);\r\n    font-size: 1.2em;\r\n}\r\n\r\n.buttonbox button:hover {\r\n    background-color: var(--white);\r\n    color: black;\r\n    border-width: 0px;\r\n  }\r\n"],sourceRoot:""}]),r.a=i},function(n,r,e){"use strict";var t,o=function(){return void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t},a=function(){var n={};return function(r){if(void 0===n[r]){var e=document.querySelector(r);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}n[r]=e}return n[r]}}(),i=[];function A(n){for(var r=-1,e=0;e<i.length;e++)if(i[e].identifier===n){r=e;break}return r}function c(n,r){for(var e={},t=[],o=0;o<n.length;o++){var a=n[o],c=r.base?a[0]+r.base:a[0],u=e[c]||0,l="".concat(c," ").concat(u);e[c]=u+1;var d=A(l),f={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(i[d].references++,i[d].updater(f)):i.push({identifier:l,updater:b(f,r),references:1}),t.push(l)}return t}function u(n){var r=document.createElement("style"),t=n.attributes||{};if(void 0===t.nonce){var o=e.nc;o&&(t.nonce=o)}if(Object.keys(t).forEach((function(n){r.setAttribute(n,t[n])})),"function"==typeof n.insert)n.insert(r);else{var i=a(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(r)}return r}var l,d=(l=[],function(n,r){return l[n]=r,l.filter(Boolean).join("\n")});function f(n,r,e,t){var o=e?"":t.media?"@media ".concat(t.media," {").concat(t.css,"}"):t.css;if(n.styleSheet)n.styleSheet.cssText=d(r,o);else{var a=document.createTextNode(o),i=n.childNodes;i[r]&&n.removeChild(i[r]),i.length?n.insertBefore(a,i[r]):n.appendChild(a)}}function s(n,r,e){var t=e.css,o=e.media,a=e.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}var p=null,m=0;function b(n,r){var e,t,o;if(r.singleton){var a=m++;e=p||(p=u(r)),t=f.bind(null,e,a,!1),o=f.bind(null,e,a,!0)}else e=u(r),t=s.bind(null,e,r),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)};return t(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap)return;t(n=r)}else o()}}n.exports=function(n,r){(r=r||{}).singleton||"boolean"==typeof r.singleton||(r.singleton=o());var e=c(n=n||[],r);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var t=0;t<e.length;t++){var o=A(e[t]);i[o].references--}for(var a=c(n,r),u=0;u<e.length;u++){var l=A(e[u]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}e=a}}}},function(n,r,e){"use strict";function t(n,r){return function(n){if(Array.isArray(n))return n}(n)||function(n,r){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(n)))return;var e=[],t=!0,o=!1,a=void 0;try{for(var i,A=n[Symbol.iterator]();!(t=(i=A.next()).done)&&(e.push(i.value),!r||e.length!==r);t=!0);}catch(n){o=!0,a=n}finally{try{t||null==A.return||A.return()}finally{if(o)throw a}}return e}(n,r)||function(n,r){if(!n)return;if("string"==typeof n)return o(n,r);var e=Object.prototype.toString.call(n).slice(8,-1);"Object"===e&&n.constructor&&(e=n.constructor.name);if("Map"===e||"Set"===e)return Array.from(n);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return o(n,r)}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(n,r){(null==r||r>n.length)&&(r=n.length);for(var e=0,t=new Array(r);e<r;e++)t[e]=n[e];return t}n.exports=function(n){var r=t(n,4),e=r[1],o=r[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),A="/*# ".concat(i," */"),c=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[e].concat(c).concat([A]).join("\n")}return[e].join("\n")}},function(n,r,e){"use strict";n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e=n(r);return r[2]?"@media ".concat(r[2]," {").concat(e,"}"):e})).join("")},r.i=function(n,e,t){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(t)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var A=0;A<n.length;A++){var c=[].concat(n[A]);t&&o[c[0]]||(e&&(c[2]?c[2]="".concat(e," and ").concat(c[2]):c[2]=e),r.push(c))}},r}},function(n,r,e){"use strict";e.r(r);var t=e(1),o=e.n(t),a=e(0),i={insert:"head",singleton:!1};o()(a.a,i),a.a.locals}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,